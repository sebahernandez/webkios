{"version":3,"file":"index.umd.js","sources":["../ModalPortal.tsx","../ModalBackdrop/index.tsx","../BaseModal.tsx","../CenterModal/index.tsx","../BottomModal/index.tsx"],"sourcesContent":["import { useEffect, useMemo } from 'react';\nimport { createPortal } from 'react-dom';\n\ninterface IProps {\n  children?: JSX.Element | JSX.Element[] | Array<JSX.Element | null>;\n}\n\nconst modalRoot = globalThis.document\n  ? document.querySelector('#modal-root')\n  : null;\n\nexport function ModalPortal({ children }: IProps) {\n  const node = useMemo(\n    () => (globalThis.document ? document.createElement('div') : null),\n    []\n  );\n\n  useEffect(() => {\n    if (modalRoot && node) {\n      modalRoot.appendChild(node);\n    }\n    return () => {\n      if (modalRoot && node) {\n        modalRoot.removeChild(node);\n      }\n    };\n  }, [node]);\n\n  return node ? createPortal(children, node) : null;\n}\n","import { classNames } from '@chbphone55/classnames';\nimport React, { forwardRef, useCallback } from 'react';\nimport { animated } from 'react-spring';\nimport './style.css';\n\nexport const ModalBackdrop = forwardRef(\n  ({ className, onClick, ...props }: any, ref: any) => {\n    const handleClick = useCallback(\n      event => {\n        if (ref.current === event.target) {\n          onClick(event);\n        }\n      },\n      [onClick, ref]\n    );\n\n    return (\n      <animated.div\n        ref={ref}\n        onClick={handleClick}\n        className={classNames('ModalBackdrop', className)}\n        {...props}\n      />\n    );\n  }\n);\n","import React, { ReactNode, useEffect, useRef } from 'react';\nimport { useTransition } from 'react-spring';\nimport { ModalBackdrop } from './ModalBackdrop';\nimport { ModalPortal } from './ModalPortal';\n\nimport useLockBodyScroll from 'react-use/lib/useLockBodyScroll';\n\nif (globalThis.document) {\n  require('wicg-inert');\n}\n\nlet root: HTMLElement | null = null;\nif (globalThis.document) {\n  root = document.getElementById('root');\n  if (!root) {\n    root = document.getElementById('__next');\n  }\n}\n\nfunction getFocusable(element: HTMLElement): NodeListOf<HTMLElement> {\n  return element.querySelectorAll(\n    'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\n  );\n}\n\nlet openModals: HTMLElement[] = [];\nconst openModalsSet: Set<HTMLElement> = new Set();\nfunction deactivateModalsOtherThan(modal: HTMLElement) {\n  if (openModalsSet.has(modal)) {\n    return;\n  }\n\n  openModals.forEach(currentModal => {\n    currentModal.setAttribute('inert', '');\n  });\n  openModals.push(modal);\n  openModalsSet.add(modal);\n}\n\nfunction activateLastModal(modal: HTMLElement) {\n  openModals = openModals.filter(currentModal => currentModal !== modal);\n  openModalsSet.delete(modal);\n  if (openModals.length) {\n    openModals[openModals.length - 1].removeAttribute('inert');\n  }\n}\n\nexport interface IBaseModalProps {\n  children: ReactNode;\n  isOpen: boolean;\n  onRequestClose: () => void;\n  autoFocus?: boolean;\n}\n\nexport function BaseModal({\n  isOpen,\n  onRequestClose,\n  children,\n  autoFocus = true\n}: IBaseModalProps) {\n  useLockBodyScroll(isOpen);\n\n  const lastActiveElement = useRef<HTMLElement | null>(null);\n  const modalRef = useRef<HTMLElement>(null);\n\n  useEffect(() => {\n    if (isOpen && modalRef.current) {\n      deactivateModalsOtherThan(modalRef.current);\n    } else if (modalRef.current) {\n      activateLastModal(modalRef.current);\n    }\n  }, [isOpen, modalRef.current])\n\n  const backdropTransition = useTransition(isOpen, null, {\n    '--opacity': 0,\n    from: { '--opacity': 0 },\n    enter: { '--opacity': 0.5 },\n    leave: { '--opacity': 0 },\n    onRest() {\n      if (autoFocus && modalRef.current && isOpen) {\n        const focusableElements = getFocusable(modalRef.current);\n        if (focusableElements.length) {\n          focusableElements[0].focus();\n        }\n      }\n    }\n  });\n\n  // Close on Escape\n  useEffect(() => {\n    function listener(event: KeyboardEvent) {\n      if (event.key === 'Escape') {\n        onRequestClose();\n      }\n    }\n    if (globalThis.window) {\n      window.addEventListener('keyup', listener);\n    }\n\n    return () => {\n      if (globalThis.window) {\n        window.removeEventListener('keyup', listener);\n      }\n    };\n  }, [onRequestClose]);\n\n  useEffect(() => {\n    if (isOpen) {\n      if (globalThis.document) {\n        lastActiveElement.current = document.activeElement as HTMLElement;\n      }\n\n      if (root) {\n        root.setAttribute('inert', '');\n      }\n    } else {\n      if (root) {\n        root.removeAttribute('inert');\n      }\n\n      // wait for inert to wear off then focus\n      setTimeout(() => {\n        if (lastActiveElement.current) {\n          lastActiveElement.current.focus();\n        }\n      }, 0);\n    }\n  }, [isOpen]);\n\n  return (\n    <ModalPortal>\n      {backdropTransition.map(backdrop =>\n        backdrop.item ? (\n          <ModalBackdrop\n            key={backdrop.key}\n            className=\"BottomModal__backdrop\"\n            style={backdrop.props}\n            onClick={onRequestClose}\n            aria-modal=\"true\"\n            role=\"dialog\"\n            ref={modalRef}\n          >\n            {children}\n          </ModalBackdrop>\n        ) : null\n      )}\n    </ModalPortal>\n  );\n}\n","import React from 'react';\nimport { useTransition, animated } from 'react-spring';\nimport { ObjectOf } from '../generic-types';\nimport { BaseModal, IBaseModalProps } from '../BaseModal';\n\nimport { classNames } from '@chbphone55/classnames';\nimport './style.css';\n\ninterface IProps extends IBaseModalProps, ObjectOf<any> {\n  modalTransition?: ReturnType<typeof useTransition>;\n}\n\nexport function useCenterModalTransition(\n  isOpen: boolean,\n  props: ObjectOf<any> = {}\n) {\n  return useTransition(isOpen, null, {\n    // @ts-ignore\n    from: { opacity: 0 },\n    // @ts-ignore\n    enter: { opacity: 1 },\n    // @ts-ignore\n    leave: { opacity: 0 },\n    ...props\n  });\n}\n\nexport function CenterModal({\n  isOpen,\n  onRequestClose,\n  autoFocus,\n  className,\n  modalTransition = useCenterModalTransition(isOpen),\n  style = {},\n  ...props\n}: IProps) {\n  return (\n    <BaseModal isOpen={isOpen} onRequestClose={onRequestClose} autoFocus={autoFocus}>\n      {modalTransition.map(({ item, key, props: transitionStyles }) =>\n        item ? (\n          <animated.div\n            key={key}\n            style={{ ...transitionStyles, ...style }}\n            className={classNames('CenterModal shadow-lg', className)}\n            {...props}\n          />\n        ) : null\n      )}\n    </BaseModal>\n  );\n}","import React from 'react';\nimport { animated, useTransition } from 'react-spring';\nimport { BaseModal, IBaseModalProps } from '../BaseModal';\n\nimport { classNames } from '@chbphone55/classnames';\nimport { ObjectOf } from '../generic-types';\nimport './style.css';\n\ninterface IProps extends IBaseModalProps, ObjectOf<any> {\n  modalTransition?: ReturnType<typeof useTransition>;\n}\n\nexport function useBottomModalTransition(\n  isOpen: boolean,\n  props: ObjectOf<any> = {}\n) {\n  return useTransition(isOpen, null, {\n    // @ts-ignore\n    from: { transform: 'translateY(100%) translateX(-50%)' },\n    // @ts-ignore\n    enter: { transform: 'translateY(0%) translateX(-50%)' },\n    // @ts-ignore\n    leave: { transform: 'translateY(100%) translateX(-50%)' },\n    ...props\n  });\n}\n\nexport function BottomModal({\n  children,\n  isOpen,\n  autoFocus,\n  onRequestClose,\n  className,\n  modalTransition = useBottomModalTransition(isOpen),\n  style = {},\n  ...props\n}: IProps) {\n  return (\n    <BaseModal isOpen={isOpen} onRequestClose={onRequestClose} autoFocus={autoFocus}>\n      {modalTransition.map(({ item, key, props: transitionStyles }) =>\n        item ? (\n          <animated.div\n            className={classNames('BottomModal shadow-lg', className)}\n            key={key}\n            style={{ ...transitionStyles, ...style }}\n            {...props}\n          >\n            {children}\n          </animated.div>\n        ) : null\n      )}\n    </BaseModal>\n  );\n}"],"names":["modalRoot","globalThis","document","querySelector","ModalPortal","node","useMemo","createElement","useEffect","appendChild","removeChild","createPortal","children","ModalBackdrop","forwardRef","ref","handleClick","useCallback","event","current","target","onClick","React","animated","div","className","classNames","props","require","let","root","getElementById","openModals","openModalsSet","Set","BaseModal","useLockBodyScroll","isOpen","lastActiveElement","useRef","modalRef","modal","has","forEach","currentModal","setAttribute","push","add","filter","delete","length","removeAttribute","activateLastModal","backdropTransition","useTransition","from","enter","leave","onRest","autoFocus","focusableElements","querySelectorAll","focus","listener","key","onRequestClose","window","addEventListener","removeEventListener","activeElement","setTimeout","map","backdrop","item","style","aria-modal","role","useCenterModalTransition","Object","opacity","useBottomModalTransition","transform","modalTransition","transitionStyles"],"mappings":"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"}