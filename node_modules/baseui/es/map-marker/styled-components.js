/*
Copyright (c) Uber Technologies, Inc.

This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/
import { styled } from '../styles/index.js';
import { FLOATING_MARKER_ANCHOR_POSITIONS, xSmallPinheadDimension } from './constants.js';
export const getAnchorTransform = (anchor, anchorSize) => ({
  [FLOATING_MARKER_ANCHOR_POSITIONS.none]: ``,
  [FLOATING_MARKER_ANCHOR_POSITIONS.topLeft]: `translate(${anchorSize}px, ${anchorSize}px)`,
  [FLOATING_MARKER_ANCHOR_POSITIONS.topRight]: `translate(-100%, ${anchorSize}px)`,
  [FLOATING_MARKER_ANCHOR_POSITIONS.bottomLeft]: `translate(${anchorSize}px, -100%)`,
  [FLOATING_MARKER_ANCHOR_POSITIONS.bottomRight]: `translate(-100%, -100%)`
})[anchor];
export const DragShadowContainer = styled('div', ({
  $theme,
  $height,
  $width,
  $dragging
}) => ({
  width: `${$width}px`,
  height: `${$height}px`,
  opacity: $dragging ? 1 : 0,
  visibility: $dragging ? 'visible' : 'hidden',
  transition: `${$theme.animation.timing300} ${$theme.animation.easeOutCurve} all`,
  position: 'relative',
  boxShadow: $theme.lighting.shadow600
}));
DragShadowContainer.displayName = "DragShadowContainer";
export const DragShadow = styled('div', ({
  $theme,
  $background,
  $width
}) => ({
  background: $background,
  borderRadius: '50%',
  width: `${$width}px`,
  height: `${4}px`,
  position: 'absolute',
  bottom: 0
}));
DragShadow.displayName = "DragShadow";
export const Needle = styled('div', ({
  $theme,
  $background,
  $height
}) => ({
  background: $background,
  width: '4px',
  height: `${$height}px`,
  boxShadow: $theme.lighting.shadow600
}));
Needle.displayName = "Needle";
export const FloatingMarkerRoot = styled('div', () => ({
  position: 'relative',
  height: `${xSmallPinheadDimension.height}px`,
  width: `${xSmallPinheadDimension.height}px`
}));
FloatingMarkerRoot.displayName = "FloatingMarkerRoot";
export const FloatingMarkerPinHeadContainer = styled('div', ({
  $theme,
  $anchor,
  $anchorSize
}) => ({
  position: 'absolute',
  transition: `${$theme.animation.timing300} ${$theme.animation.easeOutCurve} all`,
  transform: getAnchorTransform($anchor, $anchorSize)
}));
FloatingMarkerPinHeadContainer.displayName = "FloatingMarkerPinHeadContainer";
export const FloatingMarkerAnchorContainer = styled('div', () => ({
  position: 'absolute'
}));
FloatingMarkerAnchorContainer.displayName = "FloatingMarkerAnchorContainer";
export const FixedMarkerRoot = styled('div', () => ({
  display: 'flex',
  alignItems: 'center',
  flexDirection: 'column'
}));
FixedMarkerRoot.displayName = "FixedMarkerRoot";
export const FixedMarkerDragContainer = styled('div', ({
  $theme,
  $translateAmount,
  $performTranslate
}) => {
  return {
    transform: `translateY(${$performTranslate ? '0px' : `${$translateAmount}px`})`,
    transition: `${$theme.animation.timing300} ${$theme.animation.easeOutCurve} all`,
    display: 'flex',
    alignItems: 'center',
    flexDirection: 'column'
  };
});
FixedMarkerDragContainer.displayName = "FixedMarkerDragContainer";
export const OuterXSmallAnchor = styled('div', ({
  $theme,
  $round,
  $background,
  $size
}) => ({
  background: $background,
  display: 'flex',
  alignItems: 'center',
  justifyContent: 'center',
  height: `${$size}px`,
  width: `${$size}px`,
  borderRadius: $round ? '50%' : 0,
  boxShadow: $theme.lighting.shadow600
}));
OuterXSmallAnchor.displayName = "OuterXSmallAnchor";
export const InnerXSmallAnchor = styled('div', ({
  $round,
  $color,
  $size
}) => ({
  background: $color,
  height: `${$size}px`,
  width: `${$size}px`,
  borderRadius: $round ? '50%' : 0
}));
InnerXSmallAnchor.displayName = "InnerXSmallAnchor";
export const PinHead = styled('div', ({
  $theme,
  $height,
  $background,
  $gridTemplateColumns,
  $type,
  $forceCircle
}) => {
  const sharedStyles = {
    fixed: {
      padding: '0px 12px',
      borderRadius: `${$height}px`
    },
    floating: {
      padding: '0px 8px'
    }
  };
  return {
    background: $background,
    height: `${$height}px`,
    display: 'grid',
    gridTemplateColumns: $gridTemplateColumns,
    gap: '8px',
    boxShadow: $theme.lighting.shadow600,
    whiteSpace: 'nowrap',
    ...sharedStyles[$type],
    ...($forceCircle && {
      width: `${$height}px`,
      display: 'flex',
      justifyContent: 'center',
      boxSizing: 'border-box'
    })
  };
});
PinHead.displayName = "PinHead";