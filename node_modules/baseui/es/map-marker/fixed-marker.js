function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/*
Copyright (c) Uber Technologies, Inc.

This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/
import * as React from 'react';
import { useStyletron } from '../styles/index.js';
import { getOverrides } from '../helpers/overrides.js';
import { PINHEAD_TYPES, NEEDLE_SIZES, NEEDLE_HEIGHTS, PINHEAD_SIZES_SHAPES, dragShadowHeight, dragShadowMarginTop, dragShadowWidth } from './constants.js';
import PinHead from './pin-head.js';
import { FixedMarkerDragContainer as StyledFixedMarkerDragContainer, FixedMarkerRoot as StyledRoot, Needle as StyledNeedle, DragShadow as StyledDragShadow, DragShadowContainer as StyledDragShadowContainer } from './styled-components.js';

const Needle = ({
  size,
  background,
  overrides = {}
}) => {
  const [Needle, needleProps] = getOverrides(overrides.Needle, StyledNeedle);
  return /*#__PURE__*/React.createElement(Needle, _extends({
    $background: background,
    $height: NEEDLE_HEIGHTS[size]
  }, needleProps));
};

const DragShadow = ({
  background,
  dragging,
  height,
  overrides = {}
}) => {
  const [DragShadowContainer, dragShadowContainerProps] = getOverrides(overrides.DragShadowContainer, StyledDragShadowContainer);
  const [DragShadow, dragShadowProps] = getOverrides(overrides.DragShadow, StyledDragShadow);
  return /*#__PURE__*/React.createElement(DragShadowContainer, _extends({
    $width: dragShadowWidth,
    $height: height,
    $dragging: dragging
  }, dragShadowContainerProps), /*#__PURE__*/React.createElement(DragShadow, _extends({
    $width: dragShadowWidth,
    $background: background
  }, dragShadowProps)));
};

const FixedMarker = ({
  size = PINHEAD_SIZES_SHAPES.medium,
  needle = NEEDLE_SIZES.medium,
  label,
  startEnhancer,
  endEnhancer,
  color,
  background,
  dragging = false,
  overrides = {}
}) => {
  const [, theme] = useStyletron();
  const {
    colors: {
      backgroundInversePrimary,
      primaryB
    }
  } = theme;
  color = color || primaryB;
  background = background || backgroundInversePrimary;
  const doesPinHeadTransformOnDrag = needle !== NEEDLE_SIZES.none;
  const [Root, rootProps] = getOverrides(overrides.Root, StyledRoot);
  const [FixedMarkerDragContainer, fixedMarkerDragContainerProps] = getOverrides(overrides.DragContainer, StyledFixedMarkerDragContainer);
  return /*#__PURE__*/React.createElement(Root, _extends({
    "data-baseweb": "fixed-map-marker"
  }, rootProps), /*#__PURE__*/React.createElement(FixedMarkerDragContainer, _extends({
    $translateAmount: dragShadowMarginTop + dragShadowHeight,
    $performTranslate: doesPinHeadTransformOnDrag && dragging
  }, fixedMarkerDragContainerProps), /*#__PURE__*/React.createElement(PinHead, _extends({
    size: size,
    label: label
  }, startEnhancer ? {
    startEnhancer
  } : {}, endEnhancer ? {
    endEnhancer
  } : {}, {
    color: color,
    background: background,
    type: PINHEAD_TYPES.fixed,
    overrides: overrides
  })), /*#__PURE__*/React.createElement(Needle, {
    size: needle,
    background: background,
    overrides: overrides
  })), doesPinHeadTransformOnDrag && /*#__PURE__*/React.createElement(DragShadow, {
    background: background,
    dragging: dragging,
    height: dragShadowMarginTop + dragShadowHeight,
    overrides: overrides
  }));
};

export default FixedMarker;