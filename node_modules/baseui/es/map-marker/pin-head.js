function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/*
Copyright (c) Uber Technologies, Inc.

This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/
import * as React from 'react';
import { useStyletron, styled } from '../styles/index.js';
import { getOverrides } from '../helpers/overrides.js';
import { InnerXSmallAnchor as StyledInnerXSmallAnchor, OuterXSmallAnchor as StyledOuterXSmallAnchor, PinHead as StyledPinHead } from './styled-components.js';
import { PINHEAD_DIMENSIONS, PINHEAD_TYPES, PINHEAD_SIZES_SHAPES } from './constants.js';
export const _ContentItem = styled('div', ({
  $theme,
  $color,
  $height,
  $size
}) => {
  const match = {
    [PINHEAD_SIZES_SHAPES.xSmallCircle]: 'LabelSmall',
    [PINHEAD_SIZES_SHAPES.xSmallSquare]: 'LabelSmall',
    [PINHEAD_SIZES_SHAPES.small]: 'LabelSmall',
    [PINHEAD_SIZES_SHAPES.medium]: 'LabelMedium',
    [PINHEAD_SIZES_SHAPES.large]: 'LabelLarge'
  };
  return { ...$theme.typography[match[$size]],
    display: 'flex',
    alignItems: 'center',
    textAlign: 'center',
    lineHeight: `${$height}px`,
    height: `${$height}px`,
    color: $color
  };
});
_ContentItem.displayName = "_ContentItem";

const PinHead = ({
  size = PINHEAD_SIZES_SHAPES.medium,
  label = '',
  startEnhancer: StartEnhancer,
  endEnhancer: EndEnhancer,
  color,
  background,
  type = PINHEAD_TYPES.fixed,
  anchorType,
  overrides = {}
}) => {
  const [, theme] = useStyletron();
  const {
    colors: {
      backgroundPrimary,
      primaryA
    }
  } = theme;
  color = color || backgroundPrimary;
  background = background || primaryA;
  const activeElements = [label, StartEnhancer, EndEnhancer].filter(x => x);
  const gridTemplateColumns = activeElements.map(() => 'auto').join(' ');
  const forceCircle = activeElements.length === 1 && !label;
  const {
    height,
    icon
  } = PINHEAD_DIMENSIONS[size];
  const [PinHead, pinHeadProps] = getOverrides(overrides.PinHead, StyledPinHead);
  const [ContentItem, contentItemProps] = getOverrides(overrides.PinHeadContent, _ContentItem);
  const [InnerXSmallAnchor, innerXSmallAnchorProps] = getOverrides(overrides.InnerAnchor, StyledInnerXSmallAnchor);
  const [OuterXSmallAnchor, outerXSmallAnchorProps] = getOverrides(overrides.OuterAnchor, StyledOuterXSmallAnchor);

  if (type === PINHEAD_TYPES.fixed && (size === PINHEAD_SIZES_SHAPES.xSmallSquare || size === PINHEAD_SIZES_SHAPES.xSmallCircle)) {
    const round = size === PINHEAD_SIZES_SHAPES.xSmallCircle;
    return /*#__PURE__*/React.createElement(OuterXSmallAnchor, _extends({
      $round: round,
      $background: background,
      $size: height
    }, outerXSmallAnchorProps), /*#__PURE__*/React.createElement(InnerXSmallAnchor, _extends({
      $color: color,
      $round: round,
      $size: icon
    }, innerXSmallAnchorProps)));
  }

  return /*#__PURE__*/React.createElement(PinHead, _extends({
    $background: background,
    $height: height,
    $gridTemplateColumns: gridTemplateColumns,
    $forceCircle: forceCircle,
    $type: type
  }, pinHeadProps), StartEnhancer && /*#__PURE__*/React.createElement(ContentItem, _extends({
    $height: height,
    $color: color,
    $size: size
  }, contentItemProps), /*#__PURE__*/React.createElement(StartEnhancer, {
    size: icon
  })), label && /*#__PURE__*/React.createElement(ContentItem, _extends({
    $height: height,
    $color: color,
    $size: size
  }, contentItemProps), label), EndEnhancer && /*#__PURE__*/React.createElement(ContentItem, _extends({
    $height: height,
    $color: color,
    $size: size
  }, contentItemProps), /*#__PURE__*/React.createElement(EndEnhancer, {
    size: icon
  })));
};

export default PinHead;