function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/*
Copyright (c) Uber Technologies, Inc.

This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/
import * as React from 'react';
import { useStyletron } from '../styles/index.js';
import PinHead from './pin-head.js';
import { getOverrides } from '../helpers/overrides.js';
import { FloatingMarkerRoot as StyledRoot, FloatingMarkerAnchorContainer as StyledFloatingMarkerAnchorContainer, FloatingMarkerPinHeadContainer as StyledFloatingMarkerPinHeadContainer } from './styled-components.js';
import { FLOATING_MARKER_ANCHOR_POSITIONS, PINHEAD_SIZES_SHAPES, PINHEAD_TYPES, FLOATING_MARKER_ANCHOR_TYPES, anchorSize } from './constants.js';

const FloatingMarker = ({
  color,
  background,
  label,
  size = PINHEAD_SIZES_SHAPES.medium,
  anchor = FLOATING_MARKER_ANCHOR_POSITIONS.bottomLeft,
  endEnhancer,
  startEnhancer,
  anchorType = FLOATING_MARKER_ANCHOR_TYPES.circle,
  overrides = {}
}) => {
  const [, theme] = useStyletron();
  const {
    colors: {
      backgroundPrimary,
      backgroundInversePrimary,
      primaryA,
      primaryB
    }
  } = theme;
  color = color || primaryA;
  background = background || backgroundPrimary;
  const anchorPinHeadSize = anchorType === FLOATING_MARKER_ANCHOR_TYPES.circle ? PINHEAD_SIZES_SHAPES.xSmallCircle : PINHEAD_SIZES_SHAPES.xSmallSquare;
  const [Root, rootProps] = getOverrides(overrides.Root, StyledRoot);
  const [FloatingMarkerPinHeadContainer, floatingMarkerPinHeadContainerProps] = getOverrides(overrides.PinHeadContainer, StyledFloatingMarkerPinHeadContainer);
  const [FloatingMarkerAnchorContainer, floatingMarkerAnchorContainerProps] = getOverrides(overrides.AnchorContainer, StyledFloatingMarkerAnchorContainer);
  return /*#__PURE__*/React.createElement(Root, _extends({
    "data-baseweb": "floating-map-marker"
  }, rootProps), /*#__PURE__*/React.createElement(FloatingMarkerPinHeadContainer, _extends({
    $anchor: anchor,
    $anchorSize: anchorSize
  }, floatingMarkerPinHeadContainerProps), /*#__PURE__*/React.createElement(PinHead, {
    size: size,
    color: color,
    background: background,
    type: PINHEAD_TYPES.floating,
    label: label,
    startEnhancer: startEnhancer,
    endEnhancer: endEnhancer,
    overrides: overrides
  })), anchor !== FLOATING_MARKER_ANCHOR_POSITIONS.none && /*#__PURE__*/React.createElement(FloatingMarkerAnchorContainer, floatingMarkerAnchorContainerProps, /*#__PURE__*/React.createElement(PinHead, {
    size: anchorPinHeadSize,
    color: primaryB,
    background: backgroundInversePrimary,
    type: PINHEAD_TYPES.fixed,
    overrides: overrides
  })));
};

export default FloatingMarker;