import { useCallback, useState } from 'react';
import useRefMounted from './useRefMounted';
var useAsyncFn = function (fn, deps) {
    if (deps === void 0) { deps = []; }
    var _a = useState({
        loading: false,
    }), state = _a[0], set = _a[1];
    var mounted = useRefMounted();
    var callback = useCallback(function () {
        set({ loading: true });
        fn().then(function (value) {
            if (mounted.current) {
                set({ value: value, loading: false });
            }
        }, function (error) {
            if (mounted.current) {
                set({ error: error, loading: false });
            }
        });
    }, deps);
    return [state, callback];
};
export default useAsyncFn;
