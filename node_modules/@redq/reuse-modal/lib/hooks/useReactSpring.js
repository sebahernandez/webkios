"use strict";

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = useReactSpring;

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _renderpropsCjs = require("react-spring/renderprops.cjs.js");

var _useClickOutside = require("./useClickOutside");

var _useClickOutside2 = _interopRequireDefault(_useClickOutside);

var _useWindowSize = require("./useWindowSize");

var _useWindowSize2 = _interopRequireDefault(_useWindowSize);

var _useComponentSize = require("./useComponentSize");

var _useComponentSize2 = _interopRequireDefault(_useComponentSize);

var _useBodyScrollLock = require("./useBodyScrollLock");

var _useBodyScrollLock2 = _interopRequireDefault(_useBodyScrollLock);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function useReactSpring() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var dispatch = props.dispatch,
      closeOnClickOutside = props.closeOnClickOutside;

  // const size = process.browser && useWindowSize();

  return function RSpring(props) {
    var modalRef = (0, _react.useRef)();

    var compSize = (0, _useComponentSize2.default)(modalRef);
    var size = process.browser && (0, _useWindowSize2.default)(compSize);

    (0, _useClickOutside2.default)({ modalRef: modalRef, dispatch: dispatch, closeOnClickOutside: closeOnClickOutside });

    // Disable body scroll when modal is open
    (0, _useBodyScrollLock2.default)();

    var configs = props.configs,
        style = props.style;


    var defaultFrom = {
      // transform: "scale(0.3)"
      opacity: "0.4",
      transform: "scale3d(0.3, 0.3, 0.3)"
    };
    var defaultTo = {
      // transform: "scale(1)"
      opacity: "1",
      transform: "scale3d(1, 1, 1)"
    };
    var springConfig = _extends({}, configs, {
      className: "reuseModalHolder " + configs.className,
      maxHeight: configs.maxHeight ? configs.maxHeight : (configs.height ? configs.height : configs.default.height) >= size.height ? size.height - 60 : configs.height === "auto" || configs.default.height === "auto" ? size.height - 60 : "",
      maxWidth: configs.maxWidth ? configs.maxWidth : (configs.width ? configs.width : configs.default.width) >= size.width ? size.width - 40 : configs.width === "auto" || configs.default.width === "auto" ? size.width - 40 : "",
      width: configs.width ? configs.width : configs.default.width,
      height: configs.height ? configs.height : configs.default.height,
      x: configs.default.x ? configs.default.x : configs.x ? configs.x : (configs.width ? configs.width : configs.default.width) <= size.width ? (size.width - (configs.width ? configs.width : configs.default.width)) / 2 : compSize.width <= size.width ? (size.width - compSize.width) / 2 : 20,
      y: configs.default.y ? configs.default.y : configs.y ? configs.y : (configs.height ? configs.height : configs.default.height) <= size.height ? (size.height - (configs.height ? configs.height : configs.default.height)) / 2 : compSize.height <= size.height ? (size.height - compSize.height) / 2 : 30,
      animationFrom: configs.animationFrom ? configs.animationFrom : defaultFrom,
      animationTo: configs.animationTo ? configs.animationTo : defaultTo,
      transition: configs.transition ? configs.transition : {
        mass: 1,
        tension: 130,
        friction: 26
      }
    });

    var springStyle = {
      maxWidth: springConfig.maxWidth,
      maxHeight: springConfig.maxHeight,
      width: springConfig.width,
      height: springConfig.height,
      position: "absolute",
      left: springConfig.x,
      top: springConfig.y
    };

    return _react2.default.createElement(
      _renderpropsCjs.Spring,
      {
        from: _extends({}, springConfig.animationFrom),
        to: _extends({}, springConfig.animationTo),
        config: springConfig.transition
      },
      function (springProps) {
        return _react2.default.createElement(
          "div",
          {
            ref: modalRef,
            className: springConfig.className,
            style: _extends({}, springStyle, style, springProps)
          },
          _react2.default.createElement(
            "div",
            { className: "innerRndComponent" },
            props.children
          )
        );
      }
    );
  };
}
module.exports = exports["default"];