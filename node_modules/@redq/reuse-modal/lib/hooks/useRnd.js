"use strict";

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = useRnd;

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _reactRnd = require("react-rnd");

var _useClickOutside = require("./useClickOutside");

var _useClickOutside2 = _interopRequireDefault(_useClickOutside);

var _useWindowSize = require("./useWindowSize");

var _useWindowSize2 = _interopRequireDefault(_useWindowSize);

var _useBodyScrollLock = require("./useBodyScrollLock");

var _useBodyScrollLock2 = _interopRequireDefault(_useBodyScrollLock);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function useRnd() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var dispatch = props.dispatch,
      closeOnClickOutside = props.closeOnClickOutside;


  var size = process.browser && (0, _useWindowSize2.default)();
  return function RND(props) {
    var modalRef = (0, _react.useRef)();

    (0, _useClickOutside2.default)({ modalRef: modalRef, dispatch: dispatch, closeOnClickOutside: closeOnClickOutside });
    // Disable body scroll when modal is open
    (0, _useBodyScrollLock2.default)();

    var config = props.config;

    var rndConfig = _extends({}, config, {
      className: "reuseModalHolder " + config.className,
      maxWidth: config.default.width >= size.width ? size.width - 40 : config.default.width === "auto" ? size.width - 40 : "",
      maxHeight: config.default.height >= size.width ? size.height - 60 : config.default.height === "auto" ? size.height - 60 : "",
      default: {
        width: config.default.width,
        height: config.default.height,
        x: config.default.x ? config.default.x : config.default.width <= size.width ? (size.width - config.default.width) / 2 : 20,
        y: config.default.y ? config.default.y : config.default.height <= size.height ? (size.height - config.default.height) / 2 : 30
      }
    });

    return _react2.default.createElement(
      _reactRnd.Rnd,
      _extends({}, rndConfig, { ref: modalRef }),
      _react2.default.createElement(
        "div",
        { className: "innerRndComponent" },
        props.children
      )
    );
  };
}
module.exports = exports["default"];