{"ast":null,"code":"import _slicedToArray from \"/Users/alejandrosandoval/space/world_eserp/web/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _regeneratorRuntime from \"/Users/alejandrosandoval/space/world_eserp/web/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/alejandrosandoval/space/world_eserp/web/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React, { useContext } from 'react';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { Elements, CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\nimport { useMutation } from '@apollo/client';\nimport { closeModal } from '@redq/reuse-modal';\nimport { GET_PAYMENT } from 'graphql/mutation/order';\nimport StripeFormWrapper, { Heading, FieldWrapper } from './stripe-form.style';\nimport { ProfileContext } from 'contexts/profile/profile.context';\nvar stripePromise = loadStripe(process.env.NEXT_PUBLIC_STRIPE_PUBLIC_KEY);\n\nvar StripeForm = function StripeForm(_ref) {\n  var buttonText = _ref.buttonText,\n      getToken = _ref.getToken;\n  // Get a reference to Stripe or Elements using hooks.\n  var stripe = useStripe();\n  var elements = useElements();\n\n  var _useContext = useContext(ProfileContext),\n      dispatch = _useContext.dispatch;\n\n  var handleSubmit = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var cardElement, _yield$stripe$createT, token;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(!stripe || !elements)) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 2:\n              // Use elements.getElement to get a reference to the mounted Element.\n              cardElement = elements.getElement(CardElement); // Pass the Element directly to other Stripe.js methods:\n              // e.g. createToken - https://stripe.com/docs/js/tokens_sources/create_token?type=cardElement\n\n              _context.next = 5;\n              return stripe.createToken(cardElement);\n\n            case 5:\n              _yield$stripe$createT = _context.sent;\n              token = _yield$stripe$createT.token;\n              getToken(token);\n\n              if (token) {\n                dispatch({\n                  type: 'ADD_CARD',\n                  payload: token.card\n                });\n                closeModal();\n              }\n\n              console.log(token, 'token');\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleSubmit() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsxs(StripeFormWrapper, {\n    children: [/*#__PURE__*/_jsx(Heading, {\n      children: \"Ingrese Informaci\\xF3n Tarjeta\"\n    }), /*#__PURE__*/_jsx(FieldWrapper, {\n      children: /*#__PURE__*/_jsx(CardElement, {})\n    }), /*#__PURE__*/_jsx(\"button\", {\n      type: \"button\",\n      onClick: handleSubmit,\n      children: buttonText ? buttonText : 'Pagar Ahora'\n    })]\n  });\n};\n\nvar StripePaymentForm = function StripePaymentForm(_ref3) {\n  var _ref3$item = _ref3.item,\n      price = _ref3$item.price,\n      buttonText = _ref3$item.buttonText;\n\n  var _useMutation = useMutation(GET_PAYMENT),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      getPayment = _useMutation2[0];\n\n  var sendTokenToServer = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(token) {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              /*   const payment_info = await getPayment({\n                  variables: { paymentInput: JSON.stringify({ token, amount: price }) },\n                }); */\n              console.log('payment_info', 'payment_info');\n              /*  console.log(payment_info, 'payment_info'); */\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function sendTokenToServer(_x) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsx(Elements, {\n    stripe: stripePromise,\n    children: /*#__PURE__*/_jsx(StripeForm, {\n      getToken: function getToken(token) {\n        return sendTokenToServer(token);\n      },\n      buttonText: buttonText\n    })\n  });\n};\n\nexport default StripePaymentForm;","map":null,"metadata":{},"sourceType":"module"}