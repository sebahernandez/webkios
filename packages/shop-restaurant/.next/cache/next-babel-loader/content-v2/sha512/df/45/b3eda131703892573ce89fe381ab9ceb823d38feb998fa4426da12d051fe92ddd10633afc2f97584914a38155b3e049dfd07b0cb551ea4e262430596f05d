{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useContext, useCallback, useMemo } from 'react';\nimport { ModalContext } from './modal.context';\n/**\n * Callback types provided for descriptive type-hints\n */\n\n/**\n * Utility function to generate unique number per component instance\n */\nvar generateModalKey = function () {\n  var count = 0;\n  return function () {\n    return \"\".concat(++count);\n  };\n}();\n/**\n * Check whether the argument is a stateless component.\n *\n * We take advantage of the stateless nature of functional components to be\n * inline the rendering of the modal component as part of another immutable\n * component.\n *\n * This is necessary for allowing the modal to update based on the inputs passed\n * as the second argument to useModal without unmounting the previous version of\n * the modal component.\n */\n\n\nvar isFunctionalComponent = function isFunctionalComponent(Component) {\n  var prototype = Component.prototype;\n  return !prototype || !prototype.isReactComponent;\n};\n/**\n * React hook for showing modal windows\n */\n\n\nexport var useModal = function useModal(component) {\n  _s();\n\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!isFunctionalComponent(component)) {\n    throw new Error('Only stateless components can be used as an argument to useModal. You have probably passed a class component where a function was expected.');\n  }\n\n  var key = useMemo(generateModalKey, []);\n  var modal = useMemo(function () {\n    return component;\n  }, options.inputs);\n  var context = useContext(ModalContext);\n  var showModal = useCallback(function () {\n    return context.showModal(key, modal, options);\n  }, [context.showModal]);\n  var hideModal = useCallback(function () {\n    return context.hideModal(key);\n  }, [context.hideModal, key]); // const [isShown, setShown] = useState<boolean>(false);\n  // const showModal = useCallback(() => setShown(true), []);\n  // const hideModal = useCallback(() => setShown(false), []);\n  // useEffect(() => {\n  //   if (isShown) {\n  //     context.showModal(key, modal);\n  //   } else {\n  //     context.hideModal(key);\n  //   }\n  //   // Hide modal when parent component unmounts\n  //   return () => context.hideModal(key);\n  // }, [modal, isShown]);\n\n  return [showModal, hideModal];\n}; // export default useModal;\n/// uses\n// import useModal from \"use-modal\";\n// import ModalProvider from \"modal.provider\";\n// import Modal from \"react-modal\"; // It can be any modal\n// const MyModal = memo(\n//   ({ isOpen, onClose, title, description, closeBtnLabel }) => (\n//     <Modal isOpen={isOpen} onRequestClose={onClose}>\n//       <h2>{title}</h2>\n//       <div>{description}</div>\n//       <button onClick={onClose}>{closeBtnLabel}</button>\n//     </Modal>\n//   )\n// );\n// const SomePage = memo(() => {\n//   const [showModal, hideModal] = useModal(MyModal, {\n//     title: \"My Test Modal\",\n//     description: \"I Like React Hooks\",\n//     closeBtnLabel: \"Close\"\n//   });\n//   return (\n//     <>\n//       <h1>Test Page</h1>\n//       <button onClick={showModal}>Show Modal</button>\n//     </>\n//   );\n// });\n// const App = () => (\n//   <ModalProvider>\n//     <SomePage />\n//   </ModalProvider>\n// );\n// useModal(<ModalComponent: Function|>, <modalProps: Object>, <onClose: Function>): [showModal: Function, hideModal: Function]\n// Param\tType\tDescription\n// ModalComponent\tFunction\tIt can be any react component that you want to use for show modal\n// modalProps\tObject\tProps that you want to pass to your modal component\n// showModal\tFunction\tIt is function for show your modal, you can pass any dynamic props to this function\n// hideModal\tFunction\tIt is function for hide your modal, you can pass any dynamic props to this function\n// onClose\tFunction\tIt callback will be triggered after modal window closes\n// showModal(dynamicModalProps: Object)\n// Param\tType\tDescription\n// dynamicModalProps\tObject\tDynamic props that you want to pass to your modal component\n\n_s(useModal, \"JV/YcIEWCIFOdOIi0m2z4JjdB4o=\");","map":{"version":3,"sources":["/Users/sebastian/space/web/packages/shop-restaurant/src/contexts/modal/use-modal.ts"],"names":["useContext","useCallback","useMemo","ModalContext","generateModalKey","count","isFunctionalComponent","Component","prototype","isReactComponent","useModal","component","options","Error","key","modal","inputs","context","showModal","hideModal"],"mappings":";;AAAA,SAASA,UAAT,EAA0CC,WAA1C,EAAuDC,OAAvD,QAAsE,OAAtE;AACA,SAASC,YAAT,QAAwC,iBAAxC;AAEA;AACA;AACA;;AAIA;AACA;AACA;AACA,IAAMC,gBAAgB,GAAI,YAAM;AAC9B,MAAIC,KAAK,GAAG,CAAZ;AAEA,SAAO;AAAA,qBAAS,EAAEA,KAAX;AAAA,GAAP;AACD,CAJwB,EAAzB;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACC,SAAD,EAAyB;AACrD,MAAMC,SAAS,GAAGD,SAAS,CAACC,SAA5B;AAEA,SAAO,CAACA,SAAD,IAAc,CAACA,SAAS,CAACC,gBAAhC;AACD,CAJD;AAMA;AACA;AACA;;;AACA,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CACtBC,SADsB,EAGK;AAAA;;AAAA,MAD3BC,OAC2B,uEADZ,EACY;;AAC3B,MAAI,CAACN,qBAAqB,CAACK,SAAD,CAA1B,EAAuC;AACrC,UAAM,IAAIE,KAAJ,CACJ,6IADI,CAAN;AAGD;;AAED,MAAMC,GAAG,GAAGZ,OAAO,CAACE,gBAAD,EAAmB,EAAnB,CAAnB;AACA,MAAMW,KAAK,GAAGb,OAAO,CAAC;AAAA,WAAMS,SAAN;AAAA,GAAD,EAAkBC,OAAO,CAACI,MAA1B,CAArB;AACA,MAAMC,OAAO,GAAGjB,UAAU,CAACG,YAAD,CAA1B;AACA,MAAMe,SAAS,GAAGjB,WAAW,CAAC;AAAA,WAAMgB,OAAO,CAACC,SAAR,CAAkBJ,GAAlB,EAAuBC,KAAvB,EAA8BH,OAA9B,CAAN;AAAA,GAAD,EAA+C,CAC1EK,OAAO,CAACC,SADkE,CAA/C,CAA7B;AAGA,MAAMC,SAAS,GAAGlB,WAAW,CAAC;AAAA,WAAMgB,OAAO,CAACE,SAAR,CAAkBL,GAAlB,CAAN;AAAA,GAAD,EAA+B,CAC1DG,OAAO,CAACE,SADkD,EAE1DL,GAF0D,CAA/B,CAA7B,CAb2B,CAiB3B;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA,SAAO,CAACI,SAAD,EAAYC,SAAZ,CAAP;AACD,CApCM,C,CAsCP;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;GArFaT,Q","sourcesContent":["import { useContext, useEffect, useState, useCallback, useMemo } from 'react';\nimport { ModalContext, ModalType } from './modal.context';\n\n/**\n * Callback types provided for descriptive type-hints\n */\ntype ShowModal = () => void;\ntype HideModal = () => void;\n\n/**\n * Utility function to generate unique number per component instance\n */\nconst generateModalKey = (() => {\n  let count = 0;\n\n  return () => `${++count}`;\n})();\n\n/**\n * Check whether the argument is a stateless component.\n *\n * We take advantage of the stateless nature of functional components to be\n * inline the rendering of the modal component as part of another immutable\n * component.\n *\n * This is necessary for allowing the modal to update based on the inputs passed\n * as the second argument to useModal without unmounting the previous version of\n * the modal component.\n */\nconst isFunctionalComponent = (Component: Function) => {\n  const prototype = Component.prototype;\n\n  return !prototype || !prototype.isReactComponent;\n};\n\n/**\n * React hook for showing modal windows\n */\nexport const useModal = (\n  component: ModalType,\n  options: any = {}\n): [ShowModal, HideModal] => {\n  if (!isFunctionalComponent(component)) {\n    throw new Error(\n      'Only stateless components can be used as an argument to useModal. You have probably passed a class component where a function was expected.'\n    );\n  }\n\n  const key = useMemo(generateModalKey, []);\n  const modal = useMemo(() => component, options.inputs);\n  const context = useContext(ModalContext);\n  const showModal = useCallback(() => context.showModal(key, modal, options), [\n    context.showModal,\n  ]);\n  const hideModal = useCallback(() => context.hideModal(key), [\n    context.hideModal,\n    key,\n  ]);\n  // const [isShown, setShown] = useState<boolean>(false);\n  // const showModal = useCallback(() => setShown(true), []);\n  // const hideModal = useCallback(() => setShown(false), []);\n\n  // useEffect(() => {\n  //   if (isShown) {\n  //     context.showModal(key, modal);\n  //   } else {\n  //     context.hideModal(key);\n  //   }\n\n  //   // Hide modal when parent component unmounts\n  //   return () => context.hideModal(key);\n  // }, [modal, isShown]);\n\n  return [showModal, hideModal];\n};\n\n// export default useModal;\n\n/// uses\n// import useModal from \"use-modal\";\n// import ModalProvider from \"modal.provider\";\n// import Modal from \"react-modal\"; // It can be any modal\n\n// const MyModal = memo(\n//   ({ isOpen, onClose, title, description, closeBtnLabel }) => (\n//     <Modal isOpen={isOpen} onRequestClose={onClose}>\n//       <h2>{title}</h2>\n//       <div>{description}</div>\n//       <button onClick={onClose}>{closeBtnLabel}</button>\n//     </Modal>\n//   )\n// );\n\n// const SomePage = memo(() => {\n//   const [showModal, hideModal] = useModal(MyModal, {\n//     title: \"My Test Modal\",\n//     description: \"I Like React Hooks\",\n//     closeBtnLabel: \"Close\"\n//   });\n\n//   return (\n//     <>\n//       <h1>Test Page</h1>\n//       <button onClick={showModal}>Show Modal</button>\n//     </>\n//   );\n// });\n\n// const App = () => (\n//   <ModalProvider>\n//     <SomePage />\n//   </ModalProvider>\n// );\n\n// useModal(<ModalComponent: Function|>, <modalProps: Object>, <onClose: Function>): [showModal: Function, hideModal: Function]\n// Param\tType\tDescription\n// ModalComponent\tFunction\tIt can be any react component that you want to use for show modal\n// modalProps\tObject\tProps that you want to pass to your modal component\n// showModal\tFunction\tIt is function for show your modal, you can pass any dynamic props to this function\n// hideModal\tFunction\tIt is function for hide your modal, you can pass any dynamic props to this function\n// onClose\tFunction\tIt callback will be triggered after modal window closes\n// showModal(dynamicModalProps: Object)\n// Param\tType\tDescription\n// dynamicModalProps\tObject\tDynamic props that you want to pass to your modal component\n"]},"metadata":{},"sourceType":"module"}