{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport dynamic from 'next/dynamic';\nimport React, { useCallback, useState } from 'react';\nimport { ModalContext } from './modal.context';\nimport { useMedia } from 'utils/use-media';\nconst SpringModal = dynamic(() => import('components/spring-modal/spring-modal'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('components/spring-modal/spring-modal')],\n    modules: [\"../contexts/modal/modal.provider.tsx -> \" + 'components/spring-modal/spring-modal']\n  }\n});\nconst CenterModal = dynamic(() => import('components/modal/center-modal'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('components/modal/center-modal')],\n    modules: [\"../contexts/modal/modal.provider.tsx -> \" + 'components/modal/center-modal']\n  }\n});\n/**\n *  Modal de Detalle del Producto\n */\n\n/**\n * Modal Provider Props\n */\n\n/**\n * Modal Provider\n *\n * Provides modal context and renders ModalRoot.\n */\nexport const ModalProvider = ({\n  container,\n  rootComponent,\n  children\n}) => {\n  if (container && !(container instanceof HTMLElement)) {\n    throw new Error(`Container must specify DOM element to mount modal root into.\n    This behavior has changed in 3.0.0. Please use \\`rootComponent\\` prop instead.\n    See: https://github.com/mpontus/react-modal-hook/issues/18`);\n  }\n\n  const {\n    0: modals,\n    1: setModals\n  } = useState({});\n\n  const showModal = (key, modal, options = {}) => setModals(prev => _objectSpread(_objectSpread({}, prev), {}, {\n    [key]: _objectSpread({\n      component: modal,\n      isOpen: true\n    }, options)\n  }));\n\n  const hideModal = useCallback((key, onClose) => {\n    setModals(prevConfig => _objectSpread(_objectSpread({}, prevConfig), {}, {\n      [key]: _objectSpread(_objectSpread({}, prevConfig[key]), {}, {\n        isOpen: false\n      })\n    }));\n\n    if (onClose) {\n      onClose();\n    }\n  }, []);\n  const contextValue = {\n    showModal,\n    hideModal\n  };\n  const isSmall = useMedia('(max-width: 767px)');\n  return /*#__PURE__*/_jsx(ModalContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsxs(React.Fragment, {\n      children: [children, Object.keys(modals).map(currentKey => {\n        console.log(currentKey, modals[currentKey]);\n        const {\n          component: Component,\n          isOpen,\n          onClose\n        } = modals[currentKey];\n        return isSmall ? /*#__PURE__*/_jsx(SpringModal, {\n          children: /*#__PURE__*/_jsx(Component, {}),\n          isOpen: isOpen,\n          onRequestClose: () => hideModal(currentKey, onClose)\n        }, currentKey) : /*#__PURE__*/_jsx(CenterModal, {\n          children: /*#__PURE__*/_jsx(Component, {}),\n          isOpen: isOpen,\n          onRequestClose: () => hideModal(currentKey, onClose)\n        }, currentKey);\n      })]\n    })\n  });\n};","map":null,"metadata":{},"sourceType":"module"}