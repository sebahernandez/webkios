{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from 'react';\nimport { usePrevious, useMeasure } from 'utils/hooks';\nimport { useSpring, animated } from 'react-spring';\nimport { Frame, Title, Content, Header, IconWrapper } from './tree-menu.style';\nimport { Button } from 'components/button/button';\nimport { ArrowNext } from 'assets/icons/ArrowNext';\nimport * as icons from 'assets/icons/category-icons';\nconst Tree = /*#__PURE__*/React.memo(({\n  children,\n  name,\n  icon,\n  // isOpen,\n  onClick,\n  dropdown,\n  onToggleBtnClick,\n  depth,\n  defaultOpen = false\n}) => {\n  const {\n    0: isOpen,\n    1: setOpen\n  } = useState(defaultOpen);\n  useEffect(() => {\n    setOpen(defaultOpen);\n  }, [defaultOpen]);\n  const previous = usePrevious(isOpen);\n  const [bind, {\n    height: viewHeight\n  }] = useMeasure();\n  const {\n    height,\n    opacity,\n    transform\n  } = useSpring({\n    from: {\n      height: 0,\n      opacity: 0,\n      transform: 'translate3d(20px,0,0)'\n    },\n    to: {\n      height: isOpen ? viewHeight : 0,\n      opacity: isOpen ? 1 : 0,\n      transform: `translate3d(${isOpen ? 0 : 20}px,0,0)`\n    }\n  }); // const Icon = icon ? Icons[icon] : depth === 'child' ? Icons['Minus'] : null;\n  // const Icon = icon ? Icons[icon] : null;\n\n  const Icon = ({\n    iconName,\n    style\n  }) => {\n    const TagName = icons[iconName];\n    return !!TagName ? /*#__PURE__*/_jsx(TagName, {\n      style: style\n    }) : /*#__PURE__*/_jsxs(\"p\", {\n      children: [\"Invalid icon \", iconName]\n    });\n  };\n\n  return /*#__PURE__*/_jsxs(Frame, {\n    depth: depth,\n    children: [/*#__PURE__*/_jsxs(Header, {\n      open: isOpen,\n      depth: depth,\n      className: depth,\n      children: [icon && /*#__PURE__*/_jsx(IconWrapper, {\n        depth: depth,\n        children: /*#__PURE__*/_jsx(Icon, {\n          iconName: icon\n        })\n      }), /*#__PURE__*/_jsx(Title, {\n        onClick: onClick,\n        children: name\n      }), dropdown === true && /*#__PURE__*/_jsx(Button, {\n        onClick: () => setOpen(!isOpen),\n        variant: \"text\",\n        className: \"toggleButton\",\n        children: /*#__PURE__*/_jsx(ArrowNext, {\n          width: \"16px\"\n        })\n      })]\n    }), /*#__PURE__*/_jsx(Content, {\n      style: {\n        opacity,\n        height: isOpen && previous === isOpen ? 'auto' : height\n      },\n      children: /*#__PURE__*/_jsx(animated.div, _objectSpread(_objectSpread({\n        style: {\n          transform\n        }\n      }, bind), {}, {\n        children: children\n      }))\n    })]\n  });\n});\nexport const TreeMenu = ({\n  data,\n  className,\n  onClick,\n  active\n}) => {\n  const handler = children => {\n    return children.map(subOption => {\n      if (!subOption.children) {\n        return /*#__PURE__*/_jsx(Tree, {\n          name: subOption.title,\n          icon: subOption.icon,\n          depth: \"child\",\n          onClick: () => onClick(subOption.slug),\n          defaultOpen: active === subOption.slug\n        }, subOption.title);\n      }\n\n      return /*#__PURE__*/_jsx(Tree, {\n        name: subOption.title,\n        icon: subOption.icon,\n        dropdown: !subOption.children.length ? false : true,\n        depth: \"parent\",\n        onClick: () => onClick(subOption.slug),\n        defaultOpen: active === subOption.slug || subOption.children.some(item => item.slug === active),\n        children: handler(subOption.children)\n      }, subOption.title);\n    });\n  };\n\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: handler(data)\n  });\n};","map":null,"metadata":{},"sourceType":"module"}