{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _regeneratorRuntime from \"/Users/alejandrosandoval/space/world_eserp/web/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/alejandrosandoval/space/world_eserp/web/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/alejandrosandoval/space/world_eserp/web/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport React, { useContext } from 'react';\nimport { LinkButton, Button, IconWrapper, Wrapper, Container, Heading, SubHeading, OfferSection, Offer // Input,\n, Divider } from './authentication-form.style';\nimport { Google } from 'assets/icons/google';\nimport { AuthContext } from 'contexts/auth/auth.context';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { closeModal } from '@redq/reuse-modal';\nimport { Input } from 'components/forms/input';\nimport { useQuery, useMutation } from '@apollo/client';\nimport { GET_CLIENTE_USERNAME, GET_CLIENTE_USERNAME_PASSWORD } from '../../utils/graphql/query/clients.query';\nimport { SET_CLIENTE } from '../../utils/graphql/mutation/register_client';\nimport { ADD_VISITA } from '../../utils/graphql/mutation/visitas';\nimport firebase from 'firebase';\nvar app = firebase.initializeApp({\n  apiKey: \"AIzaSyCCvZM2B4036G9qMvkeCa_8_r-1EFXzXDg\",\n  authDomain: \"tuecommerce-9aca3.firebaseapp.com\",\n  databaseURL: \"https://tuecommerce-9aca3.firebaseio.com\",\n  projectId: \"tuecommerce-9aca3\",\n  storageBucket: \"tuecommerce-9aca3.appspot.com\",\n  messagingSenderId: \"13854964639\",\n  appId: \"1:13854964639:web:eac8280f24bebcac919baa\",\n  measurementId: \"G-74D8PTD9Z9\"\n});\nexport default function SignInModal(_ref) {\n  var cid = _ref.cid;\n  var provider = new firebase.auth.GoogleAuthProvider();\n  var intl = useIntl();\n\n  var _useContext = useContext(AuthContext),\n      authDispatch = _useContext.authDispatch;\n\n  var _React$useState = React.useState(0),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      id = _React$useState2[0],\n      setId = _React$useState2[1];\n\n  var _React$useState3 = React.useState(''),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      email = _React$useState4[0],\n      setEmail = _React$useState4[1];\n\n  var _React$useState5 = React.useState(''),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      password = _React$useState6[0],\n      setPassword = _React$useState6[1];\n\n  var _useMutation = useMutation(ADD_VISITA),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      addVisita = _useMutation2[0];\n\n  var _useMutation3 = useMutation(SET_CLIENTE),\n      _useMutation4 = _slicedToArray(_useMutation3, 1),\n      setCliente = _useMutation4[0];\n\n  var _useQuery = useQuery(GET_CLIENTE_USERNAME_PASSWORD, {\n    variables: {\n      clientid: cid,\n      username: email,\n      password: password\n    }\n  }),\n      data = _useQuery.data,\n      error = _useQuery.error,\n      loading = _useQuery.loading;\n\n  var _useQuery2 = useQuery(GET_CLIENTE_USERNAME, {\n    variables: {\n      clientid: cid,\n      username: email\n    }\n  }),\n      data1 = _useQuery2.data;\n\n  var toggleSignUpForm = function toggleSignUpForm() {\n    authDispatch({\n      type: 'SIGNUP'\n    });\n  };\n\n  var toggleForgotPassForm = function toggleForgotPassForm() {\n    authDispatch({\n      type: 'FORGOTPASS'\n    });\n  };\n\n  var loginCallback = function loginCallback() {\n    console.log('data...:', JSON.stringify(data)); // validamos username y password\n\n    if (data && data.cliente.length > 0) {\n      console.log('usuario Encontrado');\n      addVisita({\n        variables: {\n          cliente: data.cliente[0].id,\n          clientid: cid\n        }\n      });\n\n      if (true) {\n        localStorage.setItem('access_token', \"\".concat(data.cliente[0].last_seen));\n        localStorage.setItem('user_logged', JSON.stringify(data.cliente[0]));\n        authDispatch({\n          type: 'SIGNIN_SUCCESS'\n        });\n        closeModal();\n      }\n    } else {\n      console.log('usuario NO existe');\n      alert('usuario no encontrado');\n    }\n  };\n\n  var loginGoogleCall = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              console.log('ingresando google connect');\n              app.auth().signInWithPopup(provider).then(function (result) {\n                /** @type {firebase.auth.OAuthCredential} */\n                var credential = result.credential;\n                console.log('ingresando google connect inside'); // This gives you a Google Access Token. You can use it to access the Google API.\n                //var token = credential.accessToken;\n                // The signed-in user info.\n\n                var user = result.user;\n                localStorage.setItem('access_token', JSON.stringify(credential));\n                console.log('::::::::::', 'cid', cid, 'email', user.email, 'imageURL', user.photoURL, 'nombre', user.displayName);\n                var ret = setCliente({\n                  variables: {\n                    clientid: cid,\n                    email: user.email,\n                    imageURL: user.photoURL,\n                    nombre: user.displayName\n                  }\n                });\n                setEmail(user.email);\n                localStorage.setItem('user_logged', JSON.stringify(data1.cliente[0]));\n                console.log('return setClient: ' + JSON.stringify(ret));\n                authDispatch({\n                  type: 'SIGNIN_SUCCESS'\n                });\n                closeModal(); // ...\n              })[\"catch\"](function (error) {\n                // Handle Errors here.\n                var errorCode = error.code;\n                var errorMessage = error.message; // The email of the user's account used.\n\n                var email = error.email; // The firebase.auth.AuthCredential type that was used.\n\n                var credential = error.credential;\n                console.log(errorCode, errorMessage); // ...\n              });\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function loginGoogleCall() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsxs(Wrapper, {\n    children: [/*#__PURE__*/_jsxs(Container, {\n      children: [/*#__PURE__*/_jsx(Heading, {\n        children: /*#__PURE__*/_jsx(FormattedMessage, {\n          id: \"welcomeBack\",\n          defaultMessage: \"Welcome Back\"\n        })\n      }), /*#__PURE__*/_jsx(SubHeading, {\n        children: /*#__PURE__*/_jsx(FormattedMessage, {\n          id: \"loginText\",\n          defaultMessage: \"Login with your email & password\"\n        })\n      }), /*#__PURE__*/_jsxs(\"form\", {\n        onSubmit: loginCallback,\n        children: [/*#__PURE__*/_jsx(Input, {\n          type: \"email\",\n          placeholder: intl.formatMessage({\n            id: 'emailAddressPlaceholder',\n            defaultMessage: 'Email Address.'\n          }),\n          value: email,\n          onChange: function onChange(e) {\n            return setEmail(e.target.value);\n          },\n          required: true,\n          height: \"48px\",\n          backgroundColor: \"#F7F7F7\",\n          mb: \"10px\"\n        }), /*#__PURE__*/_jsx(Input, {\n          type: \"password\",\n          placeholder: intl.formatMessage({\n            id: 'passwordPlaceholder',\n            defaultMessage: 'Password (min 6 characters)'\n          }),\n          value: password,\n          onChange: function onChange(e) {\n            return setPassword(e.target.value);\n          },\n          required: true,\n          height: \"48px\",\n          backgroundColor: \"#F7F7F7\",\n          mb: \"10px\"\n        }), /*#__PURE__*/_jsx(Button, {\n          variant: \"primary\",\n          size: \"big\",\n          style: {\n            width: '100%'\n          },\n          type: \"submit\",\n          children: /*#__PURE__*/_jsx(FormattedMessage, {\n            id: \"continueBtn\",\n            defaultMessage: \"Continue\"\n          })\n        })]\n      }), /*#__PURE__*/_jsx(Divider, {\n        children: /*#__PURE__*/_jsx(\"span\", {\n          children: /*#__PURE__*/_jsx(FormattedMessage, {\n            id: \"orText\",\n            defaultMessage: \"or\"\n          })\n        })\n      }), /*#__PURE__*/_jsxs(Button, {\n        variant: \"primary\",\n        size: \"big\",\n        style: {\n          width: '100%',\n          backgroundColor: '#ee1111'\n        },\n        onClick: loginGoogleCall,\n        children: [/*#__PURE__*/_jsx(IconWrapper, {\n          children: /*#__PURE__*/_jsx(Google, {})\n        }), /*#__PURE__*/_jsx(FormattedMessage, {\n          id: \"continueGoogleBtn\",\n          defaultMessage: \"Continue with Google\"\n        })]\n      }), /*#__PURE__*/_jsxs(Offer, {\n        style: {\n          padding: '20px 0'\n        },\n        children: [/*#__PURE__*/_jsx(FormattedMessage, {\n          id: \"dontHaveAccount\",\n          defaultMessage: \"Don't have any account?\"\n        }), ' ', /*#__PURE__*/_jsx(LinkButton, {\n          onClick: toggleSignUpForm,\n          children: /*#__PURE__*/_jsx(FormattedMessage, {\n            id: \"signUpBtnText\",\n            defaultMessage: \"Sign Up\"\n          })\n        })]\n      })]\n    }), /*#__PURE__*/_jsx(OfferSection, {\n      children: /*#__PURE__*/_jsxs(Offer, {\n        children: [/*#__PURE__*/_jsx(FormattedMessage, {\n          id: \"forgotPasswordText\",\n          defaultMessage: \"Forgot your password?\"\n        }), ' ', /*#__PURE__*/_jsx(LinkButton, {\n          onClick: toggleForgotPassForm,\n          children: /*#__PURE__*/_jsx(FormattedMessage, {\n            id: \"resetText\",\n            defaultMessage: \"Reset It\"\n          })\n        })]\n      })\n    })]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}