{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _regeneratorRuntime from \"/Users/alejandrosandoval/space/world_eserp/web/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/alejandrosandoval/space/world_eserp/web/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React, { useContext } from 'react';\nimport * as Yup from 'yup';\nimport { withFormik, Form } from 'formik';\nimport { closeModal } from '@redq/reuse-modal';\nimport TextField from 'components/forms/text-field';\nimport { Button } from 'components/button/button';\n\n/* import { UPDATE_ADDRESS } from 'graphql/mutation/address'; */\nimport { FieldWrapper, Heading } from './address-card.style';\nimport { ProfileContext } from 'contexts/profile/profile.context';\nimport { FormattedMessage } from 'react-intl'; // Shape of form values\n\n// Wrap our form with the using withFormik HoC\nvar FormEnhancer = withFormik({\n  // Transform outer props into form values\n  mapPropsToValues: function mapPropsToValues(props) {\n    return {\n      id: props.item.id || null,\n      name: props.item.name || '',\n      info: props.item.info || ''\n    };\n  },\n  validationSchema: Yup.object().shape({\n    name: Yup.string().required('Title is required!'),\n    info: Yup.string().required('Address is required')\n  }),\n  handleSubmit: function handleSubmit(values) {\n    console.log(values, 'values'); // do submitting things\n  }\n});\n\nvar UpdateAddress = function UpdateAddress(props) {\n  var isValid = props.isValid,\n      item = props.item,\n      values = props.values,\n      touched = props.touched,\n      errors = props.errors,\n      dirty = props.dirty,\n      handleChange = props.handleChange,\n      handleBlur = props.handleBlur,\n      handleReset = props.handleReset,\n      isSubmitting = props.isSubmitting;\n  var addressValue = {\n    id: values.id,\n    type: 'secondary',\n    name: values.name,\n    info: values.info\n  };\n\n  var _useContext = useContext(ProfileContext),\n      state = _useContext.state,\n      dispatch = _useContext.dispatch;\n  /*   const [addressMutation, { data }] = useMutation(UPDATE_ADDRESS);\n   */\n\n\n  var handleSubmit = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (isValid) {\n                /*   const addressData = await addressMutation({\n                    variables: { addressInput: JSON.stringify(addressValue) },\n                  }); */\n\n                /*  console.log(addressData, 'address data'); */\n                dispatch({\n                  type: 'ADD_OR_UPDATE_ADDRESS',\n                  payload: addressValue\n                });\n                closeModal();\n              }\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleSubmit() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsxs(Form, {\n    children: [/*#__PURE__*/_jsx(Heading, {\n      children: item && item.id ? 'Editar Dirección' : 'Agregar Nueva Dirección'\n    }), /*#__PURE__*/_jsx(FieldWrapper, {\n      children: /*#__PURE__*/_jsx(TextField, {\n        id: \"name\",\n        type: \"text\",\n        placeholder: \"Ingresa Titulo\",\n        error: touched.name && errors.name,\n        value: values.name,\n        onChange: handleChange,\n        onBlur: handleBlur\n      })\n    }), /*#__PURE__*/_jsx(FieldWrapper, {\n      children: /*#__PURE__*/_jsx(TextField, {\n        id: \"info\",\n        as: \"textarea\",\n        placeholder: \"Ingrese su Direcci\\xF3n\",\n        error: touched.info && errors.info,\n        value: values.info,\n        onChange: handleChange,\n        onBlur: handleBlur\n      })\n    }), /*#__PURE__*/_jsx(Button, {\n      onClick: handleSubmit,\n      type: \"submit\",\n      style: {\n        width: '100%',\n        height: '44px'\n      },\n      children: /*#__PURE__*/_jsx(FormattedMessage, {\n        id: \"savedAddressId\",\n        defaultMessage: \"Guardar\"\n      })\n    })]\n  });\n};\n\nexport default FormEnhancer(UpdateAddress);","map":null,"metadata":{},"sourceType":"module"}