{"ast":null,"code":"import _defineProperty from \"/Users/alejandrosandoval/space/world_eserp/web/packages/shop-restaurant/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useMemo } from 'react';\nimport { WebSocketLink } from \"@apollo/client/link/ws\";\nimport { ApolloClient, InMemoryCache } from '@apollo/client';\nvar apolloClient;\n/* function createIsomorphLink() {\n  return new HttpLink({\n    uri: process.env.NEXT_PUBLIC_GRAPHQL_API_ENDPOINT, // Server URL (must be absolute)\n    credentials: 'same-origin', // Additional fetch() options like `credentials` or `headers`\n  });\n} */\n\nfunction createIsomorphLink() {\n  return new WebSocketLink({\n    uri: 'wss://cuddly-hog-22.hasura.app/v1/graphql',\n    options: {\n      reconnect: true,\n      timeout: 10000,\n      connectionParams: {\n        headers: {\n          'content-type': 'application/json',\n          'x-hasura-admin-secret': 'kxUJ2vmT0kihpyf9x7MDVAj1OoURuQzMXhN9O8JuLvMhVk05aSIKL4IdQZ4WXNDN',\n          Authorization: \"Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik9FWTJSVGM1UlVOR05qSXhSRUV5TUR\"\n        }\n      }\n    } // Additional fetch() options like `credentials` or `headers`\n\n  });\n}\n\nfunction createApolloClient() {\n  return new ApolloClient({\n    ssrMode: false,\n    link: createIsomorphLink(),\n    cache: new InMemoryCache()\n  });\n}\n\nexport function initializeApollo() {\n  var _apolloClient2;\n\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n  var _apolloClient = (_apolloClient2 = apolloClient) !== null && _apolloClient2 !== void 0 ? _apolloClient2 : createApolloClient(); // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n  // gets hydrated here\n\n\n  if (initialState) {\n    // Get existing cache, loaded during client side data fetching\n    var existingCache = _apolloClient.extract(); // Restore the cache using the data passed from getStaticProps/getServerSideProps\n    // combined with the existing cached data\n\n\n    _apolloClient.cache.restore(_objectSpread(_objectSpread({}, existingCache), initialState));\n  } // For SSG and SSR always create a new Apollo Client\n\n\n  if (false) return _apolloClient; // Create the Apollo Client once in the client\n\n  if (!apolloClient) apolloClient = _apolloClient;\n  return _apolloClient;\n}\nexport function useApollo(initialState) {\n  _s();\n\n  var store = useMemo(function () {\n    return initializeApollo(initialState);\n  }, [initialState]);\n  return store;\n}\n\n_s(useApollo, \"K8ucUnUnAgJZGJWAL9Ze8IHCmoQ=\");","map":{"version":3,"sources":["/Users/alejandrosandoval/space/world_eserp/web/packages/shop-restaurant/src/utils/apollo.tsx"],"names":["useMemo","WebSocketLink","ApolloClient","InMemoryCache","apolloClient","createIsomorphLink","uri","options","reconnect","timeout","connectionParams","headers","Authorization","createApolloClient","ssrMode","link","cache","initializeApollo","initialState","_apolloClient","existingCache","extract","restore","useApollo","store"],"mappings":";;;;;;;;AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,aAAT,QAA8B,wBAA9B;AACA,SACEC,YADF,EAEEC,aAFF,QAKO,gBALP;AAOA,IAAIC,YAAJ;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,kBAAT,GAA8B;AAC5B,SAAO,IAAIJ,aAAJ,CAAkB;AACvBK,IAAAA,GAAG,EAAE,2CADkB;AAEvBC,IAAAA,OAAO,EAAE;AACPC,MAAAA,SAAS,EAAE,IADJ;AAEPC,MAAAA,OAAO,EAAE,KAFF;AAGPC,MAAAA,gBAAgB,EAAE;AAChBC,QAAAA,OAAO,EAAE;AACP,0BAAiB,kBADV;AAEP,mCAA0B,kEAFnB;AAGPC,UAAAA,aAAa;AAHN;AADO;AAHX,KAFc,CAYtB;;AAZsB,GAAlB,CAAP;AAcD;;AAED,SAASC,kBAAT,GAA8B;AAC5B,SAAO,IAAIX,YAAJ,CAAiB;AACtBY,IAAAA,OAAO,OADe;AAEtBC,IAAAA,IAAI,EAAEV,kBAAkB,EAFF;AAGtBW,IAAAA,KAAK,EAAE,IAAIb,aAAJ;AAHe,GAAjB,CAAP;AAKD;;AAED,OAAO,SAASc,gBAAT,GAAoD;AAAA;;AAAA,MAA1BC,YAA0B,uEAAN,IAAM;;AACzD,MAAMC,aAAa,qBAAGf,YAAH,2DAAmBS,kBAAkB,EAAxD,CADyD,CAGzD;AACA;;;AACA,MAAIK,YAAJ,EAAkB;AAChB;AACA,QAAME,aAAa,GAAGD,aAAa,CAACE,OAAd,EAAtB,CAFgB,CAGhB;AACA;;;AACAF,IAAAA,aAAa,CAACH,KAAd,CAAoBM,OAApB,iCAAiCF,aAAjC,GAAmDF,YAAnD;AACD,GAXwD,CAYzD;;;AACA,aAAmC,OAAOC,aAAP,CAbsB,CAczD;;AACA,MAAI,CAACf,YAAL,EAAmBA,YAAY,GAAGe,aAAf;AAEnB,SAAOA,aAAP;AACD;AAED,OAAO,SAASI,SAAT,CAAmBL,YAAnB,EAAiC;AAAA;;AACtC,MAAMM,KAAK,GAAGxB,OAAO,CAAC;AAAA,WAAMiB,gBAAgB,CAACC,YAAD,CAAtB;AAAA,GAAD,EAAuC,CAACA,YAAD,CAAvC,CAArB;AACA,SAAOM,KAAP;AACD;;GAHeD,S","sourcesContent":["import { useMemo } from 'react';\nimport { WebSocketLink } from \"@apollo/client/link/ws\"; \nimport {\n  ApolloClient,\n  InMemoryCache,\n  HttpLink,\n  NormalizedCacheObject,\n} from '@apollo/client';\n\nlet apolloClient: ApolloClient<NormalizedCacheObject> | undefined;\n\n/* function createIsomorphLink() {\n  return new HttpLink({\n    uri: process.env.NEXT_PUBLIC_GRAPHQL_API_ENDPOINT, // Server URL (must be absolute)\n    credentials: 'same-origin', // Additional fetch() options like `credentials` or `headers`\n  });\n} */\n\nfunction createIsomorphLink() {\n  return new WebSocketLink({\n    uri: 'wss://cuddly-hog-22.hasura.app/v1/graphql',\n    options: {\n      reconnect: true,\n      timeout: 10000,\n      connectionParams: {\n        headers: {\n          'content-type' : 'application/json',\n          'x-hasura-admin-secret':  'kxUJ2vmT0kihpyf9x7MDVAj1OoURuQzMXhN9O8JuLvMhVk05aSIKL4IdQZ4WXNDN',\n          Authorization: `Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik9FWTJSVGM1UlVOR05qSXhSRUV5TUR`\n        }\n      }\n    }// Additional fetch() options like `credentials` or `headers`\n  });\n}\n\nfunction createApolloClient() {\n  return new ApolloClient({\n    ssrMode: typeof window === 'undefined',\n    link: createIsomorphLink(),\n    cache: new InMemoryCache \n  });\n}\n\nexport function initializeApollo(initialState: any = null) {\n  const _apolloClient = apolloClient ?? createApolloClient();\n\n  // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n  // gets hydrated here\n  if (initialState) {\n    // Get existing cache, loaded during client side data fetching\n    const existingCache = _apolloClient.extract();\n    // Restore the cache using the data passed from getStaticProps/getServerSideProps\n    // combined with the existing cached data\n    _apolloClient.cache.restore({ ...existingCache, ...initialState });\n  }\n  // For SSG and SSR always create a new Apollo Client\n  if (typeof window === 'undefined') return _apolloClient;\n  // Create the Apollo Client once in the client\n  if (!apolloClient) apolloClient = _apolloClient;\n\n  return _apolloClient;\n}\n\nexport function useApollo(initialState) {\n  const store = useMemo(() => initializeApollo(initialState), [initialState]);\n  return store;\n}\n"]},"metadata":{},"sourceType":"module"}