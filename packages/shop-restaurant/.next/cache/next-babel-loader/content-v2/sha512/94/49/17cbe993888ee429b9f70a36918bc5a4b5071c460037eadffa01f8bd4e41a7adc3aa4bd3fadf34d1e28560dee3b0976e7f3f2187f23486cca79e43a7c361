{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/sebastian/space/web/packages/shop-restaurant/src/contexts/modal/modal.provider.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport dynamic from 'next/dynamic';\nimport React, { useCallback, useState } from 'react';\nimport { ModalContext } from './modal.context';\nimport { useMedia } from 'utils/use-media';\nconst SpringModal = dynamic(() => import('components/spring-modal/spring-modal'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('components/spring-modal/spring-modal')],\n    modules: [\"../contexts/modal/modal.provider.tsx -> \" + 'components/spring-modal/spring-modal']\n  }\n});\nconst CenterModal = dynamic(() => import('components/modal/center-modal'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('components/modal/center-modal')],\n    modules: [\"../contexts/modal/modal.provider.tsx -> \" + 'components/modal/center-modal']\n  }\n});\n/**\n *  Modal de Detalle del Producto\n */\n\n/**\n * Modal Provider Props\n */\n\n/**\n * Modal Provider\n *\n * Provides modal context and renders ModalRoot.\n */\nexport const ModalProvider = ({\n  container,\n  rootComponent,\n  children\n}) => {\n  if (container && !(container instanceof HTMLElement)) {\n    throw new Error(`Container must specify DOM element to mount modal root into.\n    This behavior has changed in 3.0.0. Please use \\`rootComponent\\` prop instead.\n    See: https://github.com/mpontus/react-modal-hook/issues/18`);\n  }\n\n  const {\n    0: modals,\n    1: setModals\n  } = useState({});\n\n  const showModal = (key, modal, options = {}) => setModals(prev => _objectSpread(_objectSpread({}, prev), {}, {\n    [key]: _objectSpread({\n      component: modal,\n      isOpen: true\n    }, options)\n  }));\n\n  const hideModal = useCallback((key, onClose) => {\n    setModals(prevConfig => _objectSpread(_objectSpread({}, prevConfig), {}, {\n      [key]: _objectSpread(_objectSpread({}, prevConfig[key]), {}, {\n        isOpen: false\n      })\n    }));\n\n    if (onClose) {\n      onClose();\n    }\n  }, []);\n  const contextValue = {\n    showModal,\n    hideModal\n  };\n  const isSmall = useMedia('(max-width: 767px)');\n  return /*#__PURE__*/_jsxDEV(ModalContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [children, Object.keys(modals).map(currentKey => {\n        console.log(currentKey, modals[currentKey]);\n        const {\n          component: Component,\n          isOpen,\n          onClose\n        } = modals[currentKey];\n        return isSmall ? /*#__PURE__*/_jsxDEV(SpringModal, {\n          children: /*#__PURE__*/_jsxDEV(Component, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 25\n          }, this),\n          isOpen: isOpen,\n          onRequestClose: () => hideModal(currentKey, onClose)\n        }, currentKey, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(CenterModal, {\n          children: /*#__PURE__*/_jsxDEV(Component, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 25\n          }, this),\n          isOpen: isOpen,\n          onRequestClose: () => hideModal(currentKey, onClose)\n        }, currentKey, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};","map":{"version":3,"sources":["/Users/sebastian/space/web/packages/shop-restaurant/src/contexts/modal/modal.provider.tsx"],"names":["dynamic","React","useCallback","useState","ModalContext","useMedia","SpringModal","CenterModal","ModalProvider","container","rootComponent","children","HTMLElement","Error","modals","setModals","showModal","key","modal","options","prev","component","isOpen","hideModal","onClose","prevConfig","contextValue","isSmall","Object","keys","map","currentKey","console","log","Component"],"mappings":"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","sourcesContent":["import dynamic from 'next/dynamic';\nimport React, { useCallback, useState, useMemo } from 'react';\nimport { ModalType, ModalContext } from './modal.context';\nimport { useMedia } from 'utils/use-media';\nconst SpringModal = dynamic(() =>\n  import('components/spring-modal/spring-modal')\n);\nconst CenterModal = dynamic(() => import('components/modal/center-modal'));\n\n/**\n *  Modal de Detalle del Producto\n */\n\n\n/**\n * Modal Provider Props\n */\nexport interface ModalProviderProps {\n  /**\n   * Specifies the root element to render modals into\n   */\n  container?: Element;\n\n  /**\n   * Container component for modal nodes\n   */\n  rootComponent?: React.ComponentType<any>;\n\n  /**\n   * Subtree that will receive modal context\n   */\n  children: React.ReactNode;\n}\n\n/**\n * Modal Provider\n *\n * Provides modal context and renders ModalRoot.\n */\nexport const ModalProvider = ({\n  container,\n  rootComponent,\n  children,\n}: ModalProviderProps) => {\n  if (container && !(container instanceof HTMLElement)) {\n    throw new Error(`Container must specify DOM element to mount modal root into.\n    This behavior has changed in 3.0.0. Please use \\`rootComponent\\` prop instead.\n    See: https://github.com/mpontus/react-modal-hook/issues/18`);\n  }\n  const [modals, setModals] = useState<Record<string, any>>({});\n  const showModal = (key: string, modal: ModalType, options: any = {}) =>\n    setModals((prev) => ({\n      ...prev,\n      [key]: { component: modal, isOpen: true, ...options },\n    }));\n  const hideModal = useCallback((key: string, onClose: () => void) => {\n    setModals((prevConfig) => ({\n      ...prevConfig,\n      [key]: { ...prevConfig[key], isOpen: false },\n    }));\n    if (onClose) {\n      onClose();\n    }\n  }, []);\n  const contextValue: any = { showModal, hideModal };\n  const isSmall = useMedia('(max-width: 767px)');\n  return (\n    <ModalContext.Provider value={contextValue}>\n      <React.Fragment>\n        {children}\n        {Object.keys(modals).map((currentKey) => {\n          console.log(currentKey, modals[currentKey]);\n          const { component: Component, isOpen, onClose } = modals[currentKey];\n          return isSmall ? (\n            <SpringModal\n              key={currentKey}\n              children={<Component />}\n              isOpen={isOpen}\n              onRequestClose={() => hideModal(currentKey, onClose)}\n            />\n          ) : (\n            <CenterModal\n              key={currentKey}\n              children={<Component />}\n              isOpen={isOpen}\n              onRequestClose={() => hideModal(currentKey, onClose)}\n            />\n          );\n        })}\n      </React.Fragment>\n    </ModalContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}