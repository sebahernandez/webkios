{"ast":null,"code":"import { useContext, useCallback, useMemo } from 'react';\nimport { ModalContext } from './modal.context';\n/**\n * Callback types provided for descriptive type-hints\n */\n\n/**\n * Utility function to generate unique number per component instance\n */\nconst generateModalKey = (() => {\n  let count = 0;\n  return () => `${++count}`;\n})();\n/**\n * Check whether the argument is a stateless component.\n *\n * We take advantage of the stateless nature of functional components to be\n * inline the rendering of the modal component as part of another immutable\n * component.\n *\n * This is necessary for allowing the modal to update based on the inputs passed\n * as the second argument to useModal without unmounting the previous version of\n * the modal component.\n */\n\n\nconst isFunctionalComponent = Component => {\n  const prototype = Component.prototype;\n  return !prototype || !prototype.isReactComponent;\n};\n/**\n * React hook for showing modal windows\n */\n\n\nexport const useModal = (component, options = {}) => {\n  if (!isFunctionalComponent(component)) {\n    throw new Error('Only stateless components can be used as an argument to useModal. You have probably passed a class component where a function was expected.');\n  }\n\n  const key = useMemo(generateModalKey, []);\n  const modal = useMemo(() => component, options.inputs);\n  const context = useContext(ModalContext);\n  const showModal = useCallback(() => context.showModal(key, modal, options), [context.showModal]);\n  const hideModal = useCallback(() => context.hideModal(key), [context.hideModal, key]); // const [isShown, setShown] = useState<boolean>(false);\n  // const showModal = useCallback(() => setShown(true), []);\n  // const hideModal = useCallback(() => setShown(false), []);\n  // useEffect(() => {\n  //   if (isShown) {\n  //     context.showModal(key, modal);\n  //   } else {\n  //     context.hideModal(key);\n  //   }\n  //   // Hide modal when parent component unmounts\n  //   return () => context.hideModal(key);\n  // }, [modal, isShown]);\n\n  return [showModal, hideModal];\n}; // export default useModal;\n/// uses\n// import useModal from \"use-modal\";\n// import ModalProvider from \"modal.provider\";\n// import Modal from \"react-modal\"; // It can be any modal\n// const MyModal = memo(\n//   ({ isOpen, onClose, title, description, closeBtnLabel }) => (\n//     <Modal isOpen={isOpen} onRequestClose={onClose}>\n//       <h2>{title}</h2>\n//       <div>{description}</div>\n//       <button onClick={onClose}>{closeBtnLabel}</button>\n//     </Modal>\n//   )\n// );\n// const SomePage = memo(() => {\n//   const [showModal, hideModal] = useModal(MyModal, {\n//     title: \"My Test Modal\",\n//     description: \"I Like React Hooks\",\n//     closeBtnLabel: \"Close\"\n//   });\n//   return (\n//     <>\n//       <h1>Test Page</h1>\n//       <button onClick={showModal}>Show Modal</button>\n//     </>\n//   );\n// });\n// const App = () => (\n//   <ModalProvider>\n//     <SomePage />\n//   </ModalProvider>\n// );\n// useModal(<ModalComponent: Function|>, <modalProps: Object>, <onClose: Function>): [showModal: Function, hideModal: Function]\n// Param\tType\tDescription\n// ModalComponent\tFunction\tIt can be any react component that you want to use for show modal\n// modalProps\tObject\tProps that you want to pass to your modal component\n// showModal\tFunction\tIt is function for show your modal, you can pass any dynamic props to this function\n// hideModal\tFunction\tIt is function for hide your modal, you can pass any dynamic props to this function\n// onClose\tFunction\tIt callback will be triggered after modal window closes\n// showModal(dynamicModalProps: Object)\n// Param\tType\tDescription\n// dynamicModalProps\tObject\tDynamic props that you want to pass to your modal component","map":null,"metadata":{},"sourceType":"module"}