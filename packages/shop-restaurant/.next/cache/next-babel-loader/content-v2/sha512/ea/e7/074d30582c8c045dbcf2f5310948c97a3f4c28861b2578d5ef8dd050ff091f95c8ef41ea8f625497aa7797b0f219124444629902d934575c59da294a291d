{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useMemo } from 'react';\nimport { ApolloClient, InMemoryCache, HttpLink } from '@apollo/client';\nlet apolloClient;\n\nfunction createIsomorphLink() {\n  return new HttpLink({\n    uri: process.env.NEXT_PUBLIC_GRAPHQL_API_ENDPOINT,\n    // Server URL (must be absolute)\n    credentials: 'same-origin' // Additional fetch() options like `credentials` or `headers`\n\n  });\n}\n/* function createIsomorphLink() {\n  return new WebSocketLink({\n    uri: 'wss://cuddly-hog-22.hasura.app/v1/graphql',\n    options: {\n      reconnect: true,\n      timeout: 10000,\n      connectionParams: {\n        headers: {\n          'content-type' : 'application/json',\n          'x-hasura-admin-secret':  'kxUJ2vmT0kihpyf9x7MDVAj1OoURuQzMXhN9O8JuLvMhVk05aSIKL4IdQZ4WXNDN',\n          Authorization: `Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik9FWTJSVGM1UlVOR05qSXhSRUV5TUR`\n        }\n      }\n    }// Additional fetch() options like `credentials` or `headers`\n  });\n} */\n\n\nfunction createApolloClient() {\n  return new ApolloClient({\n    /* ssrMode: typeof window === 'undefined', */\n    link: createIsomorphLink(),\n    cache: new InMemoryCache()\n  });\n}\n\nexport function initializeApollo(initialState = null) {\n  /* const _apolloClient = apolloClient ?? createApolloClient(); */\n  const _apolloClient = createApolloClient(); // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n  // gets hydrated here\n\n\n  if (initialState) {\n    // Get existing cache, loaded during client side data fetching\n    const existingCache = _apolloClient.extract(); // Restore the cache using the data passed from getStaticProps/getServerSideProps\n    // combined with the existing cached data\n\n\n    _apolloClient.cache.restore(_objectSpread(_objectSpread({}, existingCache), initialState));\n  } // For SSG and SSR always create a new Apollo Client\n\n\n  if (true) return _apolloClient; // Create the Apollo Client once in the client\n\n  if (!apolloClient) apolloClient = _apolloClient;\n  return _apolloClient;\n}\nexport function useApollo(initialState) {\n  const store = useMemo(() => initializeApollo(initialState), [initialState]);\n  return store;\n}","map":{"version":3,"sources":["/Users/alejandrosandoval/space/world_eserp/web/packages/shop-restaurant/src/utils/apollo.tsx"],"names":["useMemo","ApolloClient","InMemoryCache","HttpLink","apolloClient","createIsomorphLink","uri","process","env","NEXT_PUBLIC_GRAPHQL_API_ENDPOINT","credentials","createApolloClient","link","cache","initializeApollo","initialState","_apolloClient","existingCache","extract","restore","useApollo","store"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,OAAxB;AAEA,SACEC,YADF,EAEEC,aAFF,EAGEC,QAHF,QAKO,gBALP;AAOA,IAAIC,YAAJ;;AAEA,SAASC,kBAAT,GAA8B;AAC5B,SAAO,IAAIF,QAAJ,CAAa;AAClBG,IAAAA,GAAG,EAAEC,OAAO,CAACC,GAAR,CAAYC,gCADC;AACiC;AACnDC,IAAAA,WAAW,EAAE,aAFK,CAEU;;AAFV,GAAb,CAAP;AAID;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASC,kBAAT,GAA8B;AAC5B,SAAO,IAAIV,YAAJ,CAAiB;AACtB;AACAW,IAAAA,IAAI,EAAEP,kBAAkB,EAFF;AAGtBQ,IAAAA,KAAK,EAAE,IAAIX,aAAJ;AAHe,GAAjB,CAAP;AAKD;;AAED,OAAO,SAASY,gBAAT,CAA0BC,YAAiB,GAAG,IAA9C,EAAoD;AACzD;AACA,QAAMC,aAAa,GAAGL,kBAAkB,EAAxC,CAFyD,CAIzD;AACA;;;AACA,MAAII,YAAJ,EAAkB;AAChB;AACA,UAAME,aAAa,GAAGD,aAAa,CAACE,OAAd,EAAtB,CAFgB,CAGhB;AACA;;;AACAF,IAAAA,aAAa,CAACH,KAAd,CAAoBM,OAApB,iCAAiCF,aAAjC,GAAmDF,YAAnD;AACD,GAZwD,CAazD;;;AACA,YAAmC,OAAOC,aAAP,CAdsB,CAezD;;AACA,MAAI,CAACZ,YAAL,EAAmBA,YAAY,GAAGY,aAAf;AAEnB,SAAOA,aAAP;AACD;AAED,OAAO,SAASI,SAAT,CAAmBL,YAAnB,EAAiC;AACtC,QAAMM,KAAK,GAAGrB,OAAO,CAAC,MAAMc,gBAAgB,CAACC,YAAD,CAAvB,EAAuC,CAACA,YAAD,CAAvC,CAArB;AACA,SAAOM,KAAP;AACD","sourcesContent":["import { useMemo } from 'react';\nimport { WebSocketLink } from \"@apollo/client/link/ws\"; \nimport {\n  ApolloClient,\n  InMemoryCache,\n  HttpLink,\n  NormalizedCacheObject,\n} from '@apollo/client';\n\nlet apolloClient: ApolloClient<NormalizedCacheObject> | undefined;\n\nfunction createIsomorphLink() {\n  return new HttpLink({\n    uri: process.env.NEXT_PUBLIC_GRAPHQL_API_ENDPOINT, // Server URL (must be absolute)\n    credentials: 'same-origin', // Additional fetch() options like `credentials` or `headers`\n  });\n}  \n\n/* function createIsomorphLink() {\n  return new WebSocketLink({\n    uri: 'wss://cuddly-hog-22.hasura.app/v1/graphql',\n    options: {\n      reconnect: true,\n      timeout: 10000,\n      connectionParams: {\n        headers: {\n          'content-type' : 'application/json',\n          'x-hasura-admin-secret':  'kxUJ2vmT0kihpyf9x7MDVAj1OoURuQzMXhN9O8JuLvMhVk05aSIKL4IdQZ4WXNDN',\n          Authorization: `Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik9FWTJSVGM1UlVOR05qSXhSRUV5TUR`\n        }\n      }\n    }// Additional fetch() options like `credentials` or `headers`\n  });\n} */\n\nfunction createApolloClient() {\n  return new ApolloClient({\n    /* ssrMode: typeof window === 'undefined', */\n    link: createIsomorphLink(),\n    cache: new InMemoryCache \n  });\n}\n\nexport function initializeApollo(initialState: any = null) {\n  /* const _apolloClient = apolloClient ?? createApolloClient(); */\n  const _apolloClient = createApolloClient();\n\n  // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n  // gets hydrated here\n  if (initialState) {\n    // Get existing cache, loaded during client side data fetching\n    const existingCache = _apolloClient.extract();\n    // Restore the cache using the data passed from getStaticProps/getServerSideProps\n    // combined with the existing cached data\n    _apolloClient.cache.restore({ ...existingCache, ...initialState });\n  }\n  // For SSG and SSR always create a new Apollo Client\n  if (typeof window === 'undefined') return _apolloClient;\n  // Create the Apollo Client once in the client\n  if (!apolloClient) apolloClient = _apolloClient;\n\n  return _apolloClient;\n}\n\nexport function useApollo(initialState) {\n  const store = useMemo(() => initializeApollo(initialState), [initialState]);\n  return store;\n}\n"]},"metadata":{},"sourceType":"module"}