{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/alejandrosandoval/space/world_eserp/web/packages/shop-restaurant/src/contexts/language/language.provider.tsx\";\nimport React from 'react';\nimport { IntlProvider } from 'react-intl';\nimport { InjectRTL } from 'assets/styles/global.style';\nimport Cookie from 'js-cookie';\nimport { isRTL, isLocale } from './language.utils';\nimport { StyleSheetManager } from 'styled-components';\nimport RTLPlugin from 'stylis-plugin-rtl';\nconst LanguageContext = /*#__PURE__*/React.createContext({});\nexport const LanguageProvider = ({\n  children,\n  messages\n}) => {\n  const [locale, setLocale] = React.useState('es');\n\n  const changeLanguage = newLocale => {\n    setLocale(newLocale);\n    document.documentElement.lang = newLocale;\n    Cookie.set('locale', newLocale);\n  };\n\n  React.useEffect(() => {\n    const localSetting = Cookie.get('locale');\n\n    if (localSetting && isLocale(localSetting)) {\n      document.documentElement.lang = localSetting;\n      setLocale(localSetting);\n    }\n  }, [locale]);\n  let isRtl = isRTL(locale);\n  return /*#__PURE__*/_jsxDEV(LanguageContext.Provider, {\n    value: {\n      locale,\n      changeLanguage,\n      isRtl\n    },\n    children: /*#__PURE__*/_jsxDEV(IntlProvider, {\n      locale: locale,\n      messages: messages[locale],\n      children: /*#__PURE__*/_jsxDEV(InjectRTL, {\n        lang: locale,\n        dir: isRtl ? 'rtl' : 'ltr',\n        children: /*#__PURE__*/_jsxDEV(StyleSheetManager, {\n          stylisPlugins: isRtl ? [RTLPlugin] : [],\n          children: children\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\nexport const useLocale = () => React.useContext(LanguageContext);","map":{"version":3,"sources":["/Users/alejandrosandoval/space/world_eserp/web/packages/shop-restaurant/src/contexts/language/language.provider.tsx"],"names":["React","IntlProvider","InjectRTL","Cookie","isRTL","isLocale","StyleSheetManager","RTLPlugin","LanguageContext","createContext","LanguageProvider","children","messages","locale","setLocale","useState","changeLanguage","newLocale","document","documentElement","lang","set","useEffect","localSetting","get","isRtl","useLocale","useContext"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,YAAT,QAA6B,YAA7B;AACA,SAASC,SAAT,QAA0B,4BAA1B;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;AACA,SAASC,iBAAT,QAAkC,mBAAlC;AACA,OAAOC,SAAP,MAAsB,mBAAtB;AAEA,MAAMC,eAAe,gBAAGR,KAAK,CAACS,aAAN,CAAoB,EAApB,CAAxB;AAEA,OAAO,MAAMC,gBAAgB,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,KAA4B;AAC1D,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBd,KAAK,CAACe,QAAN,CAAe,IAAf,CAA5B;;AACA,QAAMC,cAAc,GAAIC,SAAD,IAAqB;AAC1CH,IAAAA,SAAS,CAACG,SAAD,CAAT;AACAC,IAAAA,QAAQ,CAACC,eAAT,CAAyBC,IAAzB,GAAgCH,SAAhC;AACAd,IAAAA,MAAM,CAACkB,GAAP,CAAW,QAAX,EAAqBJ,SAArB;AACD,GAJD;;AAKAjB,EAAAA,KAAK,CAACsB,SAAN,CAAgB,MAAM;AACpB,UAAMC,YAAY,GAAGpB,MAAM,CAACqB,GAAP,CAAW,QAAX,CAArB;;AACA,QAAID,YAAY,IAAIlB,QAAQ,CAACkB,YAAD,CAA5B,EAA4C;AAC1CL,MAAAA,QAAQ,CAACC,eAAT,CAAyBC,IAAzB,GAAgCG,YAAhC;AACAT,MAAAA,SAAS,CAACS,YAAD,CAAT;AACD;AACF,GAND,EAMG,CAACV,MAAD,CANH;AAOA,MAAIY,KAAK,GAAGrB,KAAK,CAACS,MAAD,CAAjB;AAEA,sBACE,QAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAE;AAAEA,MAAAA,MAAF;AAAUG,MAAAA,cAAV;AAA0BS,MAAAA;AAA1B,KAAjC;AAAA,2BACE,QAAC,YAAD;AAAc,MAAA,MAAM,EAAEZ,MAAtB;AAA8B,MAAA,QAAQ,EAAED,QAAQ,CAACC,MAAD,CAAhD;AAAA,6BACE,QAAC,SAAD;AAAW,QAAA,IAAI,EAAEA,MAAjB;AAAyB,QAAA,GAAG,EAAEY,KAAK,GAAG,KAAH,GAAW,KAA9C;AAAA,+BACE,QAAC,iBAAD;AAAmB,UAAA,aAAa,EAAEA,KAAK,GAAG,CAAClB,SAAD,CAAH,GAAiB,EAAxD;AAAA,oBACGI;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CA3BM;AA6BP,OAAO,MAAMe,SAAS,GAAG,MAAM1B,KAAK,CAAC2B,UAAN,CAAiBnB,eAAjB,CAAxB","sourcesContent":["import React from 'react';\n\nimport { IntlProvider } from 'react-intl';\nimport { InjectRTL } from 'assets/styles/global.style';\nimport Cookie from 'js-cookie';\nimport { isRTL, isLocale } from './language.utils';\nimport { StyleSheetManager } from 'styled-components';\nimport RTLPlugin from 'stylis-plugin-rtl';\n\nconst LanguageContext = React.createContext({} as any);\n\nexport const LanguageProvider = ({ children, messages }) => {\n  const [locale, setLocale] = React.useState('es');\n  const changeLanguage = (newLocale): void => {\n    setLocale(newLocale);\n    document.documentElement.lang = newLocale;\n    Cookie.set('locale', newLocale);\n  };\n  React.useEffect(() => {\n    const localSetting = Cookie.get('locale');\n    if (localSetting && isLocale(localSetting)) {\n      document.documentElement.lang = localSetting;\n      setLocale(localSetting);\n    }\n  }, [locale]);\n  let isRtl = isRTL(locale);\n\n  return (\n    <LanguageContext.Provider value={{ locale, changeLanguage, isRtl }}>\n      <IntlProvider locale={locale} messages={messages[locale]}>\n        <InjectRTL lang={locale} dir={isRtl ? 'rtl' : 'ltr'}>\n          <StyleSheetManager stylisPlugins={isRtl ? [RTLPlugin] : []}>\n            {children}\n          </StyleSheetManager>\n        </InjectRTL>\n      </IntlProvider>\n    </LanguageContext.Provider>\n  );\n};\n\nexport const useLocale = () => React.useContext(LanguageContext);\n"]},"metadata":{},"sourceType":"module"}